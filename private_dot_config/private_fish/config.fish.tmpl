#-------------------------------------------------------------------------------
# SSH Agent
#-------------------------------------------------------------------------------
# function __ssh_agent_is_started -d "check if ssh agent is already started"
# 	if begin; test -f $SSH_ENV; and test -z "$SSH_AGENT_PID"; end
# 		source $SSH_ENV > /dev/null
# 	end

# 	if test -z "$SSH_AGENT_PID"
# 		return 1
# 	end

# 	ssh-add -l > /dev/null 2>&1
# 	if test $status -eq 2
# 		return 1
# 	end
# end

# function __ssh_agent_start -d "start a new ssh agent"
#   ssh-agent -c | sed 's/^echo/#echo/' > $SSH_ENV
#   chmod 600 $SSH_ENV
#   source $SSH_ENV > /dev/null
#   ssh-add
# end

# if not test -d $HOME/.ssh
#     mkdir -p $HOME/.ssh
#     chmod 0700 $HOME/.ssh
# end

# if test -d $HOME/.gnupg
#     chmod 0700 $HOME/.gnupg
# end

# if test -z "$SSH_ENV"
#     set -xg SSH_ENV $HOME/.ssh/environment
# end

# if not __ssh_agent_is_started
#     __ssh_agent_start
# end

#-------------------------------------------------------------------------------
# Kitty Shell Integration
#-------------------------------------------------------------------------------
if set -q KITTY_INSTALLATION_DIR
    set --global KITTY_SHELL_INTEGRATION enabled
    source "$KITTY_INSTALLATION_DIR/shell-integration/fish/vendor_conf.d/kitty-shell-integration.fish"
    set --prepend fish_complete_path "$KITTY_INSTALLATION_DIR/shell-integration/fish/vendor_completions.d"
end

#-------------------------------------------------------------------------------
# Vim
#-------------------------------------------------------------------------------
# We should move this somewhere else but it works for now
mkdir -p $HOME/.vim/{backup,swap,undo}

#-------------------------------------------------------------------------------
# Prompt
#-------------------------------------------------------------------------------
# Do not show any greeting
set --universal --erase fish_greeting
function fish_greeting; end
funcsave fish_greeting


#-------------------------------------------------------------------------------
# Vars
#-------------------------------------------------------------------------------
# Modify our path to include our Go binaries
# contains $HOME/code/go/bin $fish_user_paths; or set -Ua fish_user_paths $HOME/code/go/bin
# contains $HOME/bin $fish_user_paths; or set -Ua fish_user_paths $HOME/bin

# Exported variables
# if isatty
#     set -x GPG_TTY (tty)
# end

#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------



#-------------------------------------------------------------------------------
# Kubernetes
#-------------------------------------------------------------------------------
# Krew is the plugin manager for kubectl command-line tool.
# Show a tree of object hierarchies through ownerReferences.
set -gx PATH $PATH $HOME/.krew/bin

#-------------------------------------------------------------------------------
# Aliases
#-------------------------------------------------------------------------------

eval (thefuck --alias | tr '\n' ';')

. ~/.config/fish/kubectl_aliases.fish
# [ -f "$HOME/.config/fish/kubectl_aliases.fish" ] && . "./kubectl_aliases.fish"
# source "$HOME/.config/fish/kubectl_aliases"


if status is-interactive
    abbr --add --global workspace cd ~/Workspace
    abbr --add --global personal cd ~/Workspace/personal
    abbr --add --global business cd ~/Workspace/business

    # Administer like a sir
    abbr --add --global please sudo

    abbr --add --global 1plogin op signin my.1password.com "sherif@abdalla.uk"
    abbr --add --global speedtest networkQuality

    abbr --add --global badge tput bel
    abbr --add --global stfu osascript -e 'set volume output muted true'
    abbr --add --global pumpitup osascript -e 'set volume output volume 75'
    abbr --add --global afk /System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend

    # Janitor goodies
    abbr --add --global gradleclean rm -rf $HOME/.gradle/caches/
    abbr --add --global pyclean find . | grep -E '(__pycache__|\.pyc|\.pyo$)' | xargs rm -rf

    # Python
    abbr --add --global py python
    abbr --add --global pyserver py -m http.server
    abbr --add --global pipup pip freeze --local | cut -d = -f 1  | xargs pip install -U
end

set -gx LC_ALL en_GB.UTF-8
set -gx LANG en_GB.UTF-8

# Preferred editor for local and remote sessions
if test -n "$SSH_CONNECTION"
  set -gx EDITOR "vim"
else
  set -gx EDITOR "code"
end

## homebrew
fish_add_path /opt/homebrew/bin
fish_add_path /opt/homebrew/sbin

set -gx VISUAL "code"
#set -gx JAVA_HOME (/usr/libexec/java_home -v 11)
set -gx SSH_AUTH_SOCK ~/.1password/agent.sock

set -U fish_user_paths /usr/local/bin $fish_user_paths
# set -U fish_user_paths /usr/local/MacGPG2/bin $fish_user_paths

# Configure ASDF
source (brew --prefix asdf)"/libexec/asdf.fish"

# Configure Homebrew completions
if test -d (brew --prefix)"/share/fish/completions"
    set -gx fish_complete_path $fish_complete_path (brew --prefix)/share/fish/completions
end

if test -d (brew --prefix)"/share/fish/vendor_completions.d"
    set -gx fish_complete_path $fish_complete_path (brew --prefix)/share/fish/vendor_completions.d
end

# fish-abbreviation-tips plugin

# Configure Starship
starship init fish | source

# Configure zoxide
zoxide init fish | source
